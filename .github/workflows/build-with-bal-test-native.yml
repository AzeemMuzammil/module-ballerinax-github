name: GraalVM Check

# Controls when the action will run.
on: 
  schedule:
    - cron: '30 18 * * *'
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    build:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - uses: actions/checkout@v2

            - name: Set up GraalVM
              uses: graalvm/setup-graalvm@v1
              with:
                  version: 'latest'
                  java-version: '11'
                  components: 'native-image'
                  github-token: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Check GraalVM installation
              run: |
                  echo "GRAALVM_HOME: ${{ env.GRAALVM_HOME }}"
                  echo "JAVA_HOME: ${{ env.JAVA_HOME }}"
                  native-image --version

            # Build the ballerina project
            - name: Ballerina Build
              uses: ballerina-platform/ballerina-action/@nightly
              with:
                  args:
                      build --native ./github
              env:
                  JAVA_HOME: /usr/lib/jvm/default-jvm
            - name: Ballerina Tests
              uses: ballerina-platform/ballerina-action/@nightly
              with:
                  args:
                      test --native --code-coverage ./github
              env:
                ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
                ORG_NAME: ${{ secrets.ORG_NAME }}
                USER_REPO_NAME: ${{ secrets.REPO_NAME }}
                ISSUE_ASSIGNEE: ${{ secrets.ASSIGNEE }}
                RESOURCE_PATH: ${{ secrets.RESOURCE_PATH }}
                JAVA_OPTS: -DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true
                GITHUB_TOPIC: ${{ secrets.TOPIC }}
                GITHUB_SECRET: ${{ secrets.SECRET }}
                GITHUB_CALLBACK: ${{ secrets.CALLBACK }}
                GITHUB_USERNAME: ${{ secrets.USERNAME }}

            # Read the ballerina test results
            - name: Read Ballerina Test Results
              id: test_results
              run: |
                content=`cat ./github/target/report/test_results.json`                
                content="${content//'%'/'%25'}"
                content="${content//$'\n'/'%0A'}"
                content="${content//$'\r'/'%0D'}"
                echo "::set-output name=testResultsJson::$content"

            # Print the code coverage information
            - name: Code Coverage
              run: |
                echo "Covered Code Lines : ${{fromJson(steps.test_results.outputs.testResultsJson).coveredLines}}"
                echo "Total Code Lines : $(expr ${{fromJson(steps.test_results.outputs.testResultsJson).missedLines}} + ${{fromJson(steps.test_results.outputs.testResultsJson).coveredLines}})"
                echo "Code Coverage Percentage : ${{fromJson(steps.test_results.outputs.testResultsJson).coveragePercentage}}"
